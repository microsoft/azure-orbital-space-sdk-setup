{{- if .Values.services.core.registry.enabled }}
{{- $serviceValues := .Values.services.core.registry }}
{{- $globalValues := .Values.global }}
{{- $imgName := printf "%s/%s:%s" (include "spacefx.servicePrefixCalc" (dict "globalValues" $globalValues)) $serviceValues.repository (include "spacefx.serviceVersionCalc" (dict "globalValues" $globalValues "serviceValues" $serviceValues)) }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $serviceValues.appName | quote }}
  namespace: {{ $serviceValues.serviceNamespace }}
spec:
  type: NodePort
  ports:
    - name: {{printf "%s-registry" $serviceValues.repository }}
      port: {{ $serviceValues.repositoryTargetPort }}
      targetPort: {{ $serviceValues.repositoryTargetPort }}
    - name: {{printf "%s-pypiserver" $serviceValues.repository }}
      port: {{ $serviceValues.pypiServerTargetPort }}
      targetPort: {{ $serviceValues.pypiServerTargetPort }}
  selector:
    app: {{ $serviceValues.appName | quote }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $serviceValues.appName | quote }}
  namespace: {{ $serviceValues.serviceNamespace | quote }}
  labels:
    app: {{ $serviceValues.appName | quote }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ $serviceValues.appName | quote }}
  template:
    metadata:
      labels:
        app: {{ $serviceValues.appName | quote }}
    spec:
      containers:
      - name: {{ $serviceValues.appName | quote }}
        ports:
          - containerPort: {{ $serviceValues.repositoryTargetPort }}
          - containerPort: {{ $serviceValues.pypiServerTargetPort }}
        image: {{ $imgName | quote }}
        imagePullPolicy: Never
        {{- include "spacefx.resourceLimits" (dict "globalValues" $globalValues "serviceValues" $serviceValues) | indent 8  }}
        command:
        {{- range $serviceValues.containerCommand }}
          - {{ . }}
        {{- end }}
        env:
          - name: REGISTRY_HTTP_TLS_CERTIFICATE
            value: {{ $serviceValues.tlsCertificate }}
          - name: REGISTRY_HTTP_TLS_KEY
            value: {{ $serviceValues.tlsKey }}
          - name: REGISTRY_ENABLED
            value: {{ $serviceValues.services.registryEnabled | ternary "true" "false" | quote }}
          - name: PYPISERVER_ENABLED
            value: {{ $serviceValues.services.pypiServerEnabled | ternary "true" "false" | quote }}
        volumeMounts:
          - name: registry-data-mount
            mountPath: /var/lib/registry
          - name: registry-cert-mount
            mountPath: /certs
          - name: pypiserver-data-mount
            mountPath: /data/packages
      volumes:
        - name: pypiserver-data-mount
          hostPath:
            path: {{ $globalValues.spacefxDirectories.base }}/registry/pypiserver
            type: DirectoryOrCreate
        - name: registry-data-mount
          hostPath:
            path: {{ $globalValues.spacefxDirectories.base }}/registry/data
            type: DirectoryOrCreate
        - name: registry-cert-mount
          hostPath:
            path: {{ $globalValues.spacefxDirectories.base }}/certs/registry
            type: DirectoryOrCreate
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
# core-registry generation end
{{- end }}